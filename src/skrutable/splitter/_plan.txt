goal: make wrapper for Splitter so that it's more usable 

use-case:
	from skrutable.splitter.wrapper import Splitter as Spl
	split_text = Spl.split(text) # with a little wait

main required adjustments:
	deal with punctuation
	deal with char-limit

first execute as before:
	simply discard punctuation
		(e.g., replace by newlines, assuming sandhi already manually undone around all punctuation â€” which maybe it isn't!)
	use on-the-fly chunking for staying under char-limit

next step, bonus prettiness goal: preserve punctuation instead of discarding
	two modes
		easier (start with this): assume sandhi already manually undone around punctuation
			in this case, just string-split on all splittables, keep parallel lists, split content, and recombine
		harder (do later): sandhi not already undone around punctuation
			possible solution (serioulsy bumps up against 128-char problem): do same as above, but also add previous and following chunks for splitting, which are then discarded after splitting (maybe artificial truncation possible?)

***

easiest way to incorporate Splitter 
	add Splitter code (written for python 3.5) as skrutable wrapper subpackage (written for python 3.8)
	include in that subpackage a virtual environment with tensorflow 1.15
	(no need for a pyenv .python-version file, it can't be used anyway)
	have 3.8 wrapper code call 3.5 subpackage code via subprocess
		in subprocess call, simply use path to python 3.5 executable 
			e.g., this does work: subprocess.call("/Users/tyler/.pyenv/versions/3.5.9/bin/python3.5 -c 'import sys; print(sys.version)'", shell='True')
		obviously not great to have my own name here
		but can theoretically substitute %s for "/Users/tyler/.pyenv/versions/3.5.9" and just let someone fill in their own path up to that point
		(probably want to be retraining and reimplementing instead of encouraging sharing in this form)

